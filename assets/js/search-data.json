{
  
    
        "post0": {
            "title": "머신러닝 개요",
            "content": "&#47672;&#49888;&#47084;&#45789;&#51060;&#46976;? . Machine Learning은 컴퓨터가 데이터로부터 학습하도록 컴퓨터를 프로그래밍하는 과학(또는 예술)입니다. 아래는 일반적인 정의입니다. | . [Machine Learning is the] field of study that gives computers the ability to learn without being explicitly programmed. -Arthur Samuel, 1959 . 조금 더 공학적인 정의는 다음과 같습니다. | . A computer program is said to learn from experience E with respect to some task T and some performance measure P, if its performance on T, as measured by P, improves with experience E. -Tom Mitchell, 1997 . 공학적인 정의를 잠깐 짚고 넘어가자면, 프로그램이 어떤 작업 $T$를 수행했을 때 그 성능 지표가 $P$이고 이 $P$가 어떤 경혐 $E$에 의해 향상되었을 때, 우리는 작업 $T$와 그 성능 지표 $P$에 관하여 &#39;프로그램이 경험 $E$를 통해 학습하였다&#39;고 말할 수 있다는 것입니다. . | Spam filter를 예로 들겠습니다. 스팸 필터는 일반 메일과 스팸 메일을 분류해주는 머신러닝 프로그램입니다. 이 프로그램은 저절로 뚝딱 만들어진 게 아니라 사용자(인간)에 의해 미리 분류된 사전의 수많은 분류 데이터들을 학습한 프로그램인 것이죠. 이 때 시스템이 학습하는 훈련 데이터들의 집단을 training set이라고 하고 개별 훈련 데이터 하나하나를 각각 training instance 또는 sample이라고 합니다. . | . . 참고문헌 . Aurelien Geron, &quot;Hands-On Machine Learning with Scikit-Learn, Keras &amp; TensorFlow: Concepts, Tools, and Techniques to Build Intelligent Systems&quot;, O&#39;Reilly . | .",
            "url": "https://woohyeok-moon.github.io/Blog/machine%20learning/2021/10/02/%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9D_%EA%B0%9C%EC%9A%94.html",
            "relUrl": "/machine%20learning/2021/10/02/%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9D_%EA%B0%9C%EC%9A%94.html",
            "date": " • Oct 2, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "11. 베이즈 정리",
            "content": "&#51204;&#54869;&#47456; &#44277;&#49885; . 사건 $B_1, B_2, dots, B_k$는 상호배반이며 $(B_i cap B_j = varnothing, i neq j, cup_{i=1}^k B_i=S)$라고 한다. 이 때 임의의 사건 A에 대하여 $$P(A)= sum_{i=1}^k P(B_i)P(A|B_i)$$ 가 성립한다. 이를 전확률 공식 또는 전체확률의 공식 이라고 합니다. . | 표본공간 $S$가 서로 배반인 사건 $B_1, B_2, dots, B_k$로 이루어져 있다면 그 표본공간 내부의 사건 $A$의 확률은 $A$와 $B_i$의 교집합들의 확률의 합으로 표현할 수 있습니다. $$P(A)=P(A cap B_i) + P(A cap B_2) + cdots + P(A cap B_k)$$ . | 조건부 확률에서 배운 식을 적용하면 아래와 같은 식을 유도할 수 있습니다. $$P(A cap B_i) = P(B_i) cdot P(A|B_i)$$ $$P(A) = P(B_1)P(A|B_1) + P(B_2)P(A|B_2) + cdots + P(B_k)P(A|B_k)$$ . | 이는 베이즈 정리를 유도하기 위한 중간 과정이라고 생각해도 무방합니다. . | . . &#48288;&#51060;&#51592; &#51221;&#47532; . 사건 $B_1, B_2, dots, B_k$는 상호배반이며 $(B_i cap B_j = varnothing, i neq j, cup_{i=1}^k B_i=S)$라고 한다. 이 때 임의의 사건 A가 일어났다는 조건 하에서 사건 B_j가 일어날 확률은 $$P(B_j|A)= frac{P(B_j)P(A|B_j)}{ sum_{i=1}^k P(B_i)P(A|B_i)}$$ 가 성립한다. 이를 베이즈 정리 라고 합니다. . | 좌항을 변환해보면 $P(B_j|A)= frac{P(A cap B_j)}{P(A)}$이고, 분자에는 조건부 확률의 공식, 분모에는 전확률의 공식을 적용하면 아래의 식을 유도할 수 있습니다. $$ frac{P(B_j)P(A|B_j)}{ sum_{i=1}^k P(B_i)P(A|B_i)}$$ . | 이는 추후 베이지안 통계학의 기초가 됩니다. . | .",
            "url": "https://woohyeok-moon.github.io/Blog/statistics/2021/10/01/%EB%B2%A0%EC%9D%B4%EC%A6%88_%EC%A0%95%EB%A6%AC.html",
            "relUrl": "/statistics/2021/10/01/%EB%B2%A0%EC%9D%B4%EC%A6%88_%EC%A0%95%EB%A6%AC.html",
            "date": " • Oct 1, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "10. 확률의 곱셈정리",
            "content": "&#54869;&#47456;&#51032; &#44273;&#49480;&#51221;&#47532; . 조건부 확률에서 아래의 식을 배웠습니다. | . $$P(A|B) = frac{P(A cap B)}{P(B)}$$ . 이 식을 통해 다음의 관계식을 얻을 수 있습니다. | . $$P(A cap B) = P(B) cdot P(A|B)$$ $$P(A cap B) = P(A) cdot P(B|A)$$ . 이렇게 얻은 식을 우리는 확률의 곱셈정리 라고 합니다. 예를 들어 철수와 영희가 차례로 5개의 제비 중 2개의 당첨제비가 있는 제비뽑기를 한다고 가정했을 때 철수가 당첨되는 사건을 A, 영희가 당첨되는 확률을 B라고 하겠습니다. 철수가 뽑은 제비는 다시 넣지 않는 비복원추출입니다. 이 때 사건 A는 사건 B에 영향을 미치게 됩니다. 따라서 A와 B가 동시에 일어날 확률 $P(A cap B)$는 $P(A) cdot P(B|A)$가 됩니다. 직접 구해보면 아래와 같다는 것을 알 수 있을 것입니다. | . $$P(A cap B) = frac{2}{5} cdot frac{1}{4} = frac{1}{10}$$ . 하지만 만약 두 사건이 위와 다르게 서로 영향을 미치지 않는다면, 즉 독립이라면, $P(A|B) = P(A)$이므로 아래와 같은 식을 얻어낼 수 있습니다. | . $$P(A cap B) = P(A) cdot P(B)$$ .",
            "url": "https://woohyeok-moon.github.io/Blog/statistics/2021/09/24/%ED%99%95%EB%A5%A0%EC%9D%98_%EA%B3%B1%EC%85%88%EC%A0%95%EB%A6%AC.html",
            "relUrl": "/statistics/2021/09/24/%ED%99%95%EB%A5%A0%EC%9D%98_%EA%B3%B1%EC%85%88%EC%A0%95%EB%A6%AC.html",
            "date": " • Sep 24, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "9. 조건부 확률",
            "content": "저번 시간에 확률의 덧셈정리를 공부했습니다. 덧셈정리를 공부했으니 이제 곱셈정리를 공부할 차례입니다. 하지만 그 전에 알아야 할 것이 있는데, 바로 조건부 확률입니다. . &#51312;&#44148;&#48512; &#54869;&#47456; . - 어떠한 사건 B가 일어났을 때 사건 A가 일어났을 확률을 조건부 확률이라고 합니다. 기호로는 아래와 같이 나타냅니다. . $$P(A|B)= frac{P(A cap B)}{P(B)}$$ . 이해를 돕기 위해 일반적인 사건 A의 확률 $P(A)$ 의 관점에서 바라보겠습니다. 사건 A가 발생할 확률은 $P(A)$ 이며, 이는 $ frac{P(A)}{P(S)}$와 같다고 볼 수 있습니다. $P(S)=1$이기 때문에 생략되어 $P(A)$로 나타낼 수 있는 것이죠. . $P(A)$는 어떤 시행에서 A라는 사건이 일어날 확률을 구하는 것입니다. 이는 다르게 말하면 시행을 했다는 전제 하에 비로소 사건 A의 확률을 정의할 수 있다는 것입니다. 이 시행에서 일어날 수 있는 모든 사건들을 합한 것이 바로 표본공간입니다. 그렇다면 사건 A의 확률은 어떤 사건 S가 일어났을 때 사건 A의 확률로 정의될 수 있는 것이고, 이는 $P(A|S)= frac{P(A cap S)}{P(S)}= frac{P(A)}{1}=P(A)$ 로 표현될 수 있습니다. . | 이와 마찬가지로, 사건 B가 일어났을 때 사건 A가 일어났을 확률에서 분자는 $P(A cap B)$가 되고 분모는 $P(B)$ 가 됩니다. 사건 B가 일어났을 때 사건 A가 일어났다는 것은 사건 A와 B가 동시에 일어난다는 것을 뜻하며, 이 확률은 $P(A cap B)$ 로 구할 수 있습니다. 또한 이 때 사건 B는 &#39;조건부 확률이 아닌 일반적인 확률에서의 표본공간 S&#39;를 대신해주는 역할을 하기 때문에 분모로 들어가는 것입니다. . | .",
            "url": "https://woohyeok-moon.github.io/Blog/statistics/2021/08/20/%EC%A1%B0%EA%B1%B4%EB%B6%80_%ED%99%95%EB%A5%A0.html",
            "relUrl": "/statistics/2021/08/20/%EC%A1%B0%EA%B1%B4%EB%B6%80_%ED%99%95%EB%A5%A0.html",
            "date": " • Aug 20, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "8. 확률의 덧셈정리",
            "content": "&#54869;&#47456;&#51032; &#45927;&#49480;&#51221;&#47532; . - 서로 다른 사건 A와 B가 존재할 때, $A cup B$의 확률은 아래와 같습니다. . $$P(A cup B)=P(A)+P(B)-P(A cap B)$$ . . 서로 다른 집합 A와 B에서 아래와 같은 공식이 성립합니다. n(A)는 사건 A의 원소의 개수를 뜻합니다. . $$n(A cup B)=n(A)+n(B)-n(A cap B)$$ . 저희는 임의의 사건 A에 대하여 $P(A)= frac{n(A)}{n(S)}$ 임을 알고 있습니다. 따라서 모든 항에 n(S)를 나누어줍니다. . $$ frac{n(A cup B)}{n(S)}= frac{n(A)}{n(S)}+ frac{n(B)}{n(S)}- frac{n(A cap B)}{n(S)}$$ . $$P(A cup B)=P(A)+P(B)-P(A cap B)$$ . | . . &#50668;&#49324;&#44148;&#51032; &#54869;&#47456; . - 여사건 $A^c$의 확률은 아래와 같습니다. . $$P(A^c) = 1-P(A)$$ . 위 식은 아래와 같은 과정을 통해 유도할 수 있습니다. $$P(A) + P(A^c) = P(S)$$ $$P(S) = 1$$ $$P(A)+P(A^c)=1$$ $$P(A^c)=1-P(A)$$ | .",
            "url": "https://woohyeok-moon.github.io/Blog/statistics/2021/08/19/%ED%99%95%EB%A5%A0%EC%9D%98-%EB%8D%A7%EC%85%88%EC%A0%95%EB%A6%AC.html",
            "relUrl": "/statistics/2021/08/19/%ED%99%95%EB%A5%A0%EC%9D%98-%EB%8D%A7%EC%85%88%EC%A0%95%EB%A6%AC.html",
            "date": " • Aug 19, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "7. 확률 공리",
            "content": "&#54869;&#47456;&#51032; &#44277;&#47532;&#51201; &#51221;&#51032; . - 공리란 수학에서 정의를 하지 않기로 약속한 당연한 것으로 취급하는 명제를 말합니다. . 이러한 공리를 확률의 관점에서 바라보면, 확률을 말할 때 아주 당연하게 여겨지는 성질들을 모아 이러한 성질들을 만족해야만 확률이라고 정의할 수 있다고 합니다. 그리고 이러한 성질들을 바로 확률의 공리라고 합니다. 확률의 공리는 세 가지가 있습니다. | . $$P(S) = 1 quad (S ; is , a , sample , space)$$ $$if A subset S, quad 0 leq P(A) leq 1$$ $$if A_i cap A_j = varnothing ; (i neq j), quad cup_{i=1}^{ infty}A_i = sum_{i=1}^{ infty}P(A_i)$$ . &#39;확률&#39;로 표현되는 모든 것들은 위의 세 가지 성질을 만족합니다. | .",
            "url": "https://woohyeok-moon.github.io/Blog/statistics/2021/08/18/%ED%99%95%EB%A5%A0-%EA%B3%B5%EB%A6%AC.html",
            "relUrl": "/statistics/2021/08/18/%ED%99%95%EB%A5%A0-%EA%B3%B5%EB%A6%AC.html",
            "date": " • Aug 18, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "6. 순열과 조합(3)",
            "content": "&#51312;&#54633;(combination) . - 서로 다른 n개 중 r개를 순서에 관계없이 선택하는 것을 조합이라고 합니다. 기호로는 $_nC_r$ 로 나타내고, 계산식은 $ frac{n!}{r!(n-r)!}$ 입니다. . 지금까지 배운 순열과는 달리 조합에서는 순서를 고려하지 않기 때문에, 순서로 인해 발생하는 중복들을 제거해줘야 합니다. . | A부터 D까지의 알파벳 카드 중 3개의 카드를 뽑는 시행을 해보겠습니다. . 첫 번째 카드를 고를 때 가능한 경우는 A, B, C, D 총 4가지입니다. . 두 번째 카드를 고를 때 가능한 경우는 첫 번째 카드를 제외하여 3가지입니다. . 세 번째 카드를 고를 때 가능한 경우는 나머지 2가지입니다. . 따라서 가능한 경우의 수는 아래와 같습니다. $$4 * 3 * 2 = 24$$ . | 이 경우의 수는 순서를 고려한 경우의 수입니다. 하지만 저희는 순서와는 관계없는 단순한 뽑기를 진행하고 있기 때문에 순서로 인해 발생하는 중복들을 제거하는 작업이 필요합니다. 뽑은 카드가 A, B, C라고 가정했을 때, 이 세 카드에 의해 중복되는 경우를 구해보겠습니다. . (A, B, C) (A, C, B) (B, A, C) (B, C, A) (C, A, B) (C, B, A) . 총 6가지이며, $3!=3*2*1=6$ 과 같이 식으로도 계산할 수 있습니다. 저희는 중복되는 경우는 빼는 것이 아니라 나눠준다는 것을 배웠습니다. 여기서도 마찬가지로 6을 나눠주겠습니다. . $$ frac{24}{6}=4$$ . 따라서 경우의 수는 4이며, $_nC_r$을 사용하여 아래와 같이 구할 수 있습니다. $$_4C_3= frac{4!}{3!(4-3)!}= frac{24}{6}$$ . | . . &#51473;&#48373;&#51312;&#54633; . - 서로 다른 n개에서 r개를 중복을 허용하여 선택하는 것을 중복조합이라고 합니다. 기호로는 $_nH_r$로 나타내고, 계산식은 $_nH_r=_{n+k-1}C_r= frac{(n+k-1)!}{r!(n-1)!}$ 입니다. . A부터 D까지의 알파벳 중 하나를 중복을 허용하여 3번 선택한다고 가정해봅시다. 이 예제는 6개의 빈 칸 (□ □ □ □ □ □) 중 3개의 칸막이가 들어갈 칸을 선택하는 예제와 같습니다. 그리고 각 칸막이 사이에는 하나의 알파벳만 들어갈 수 있습니다. 뽑은 카드가 A, B, C라고 가정했을 때, 만약 1, 2, 3번째 칸을 선택했다면 | | | C C C 가 되는 것이고, 2, 4, 6번째 칸을 선택했다면 A | B | C | 가 되는 것이고, 1, 3, 5번째 칸을 선택했다면 | A | B | C 가 되는 것입니다. . | 이제 예제는 서로 다른 6개 중 4개를 중복을 허용하여 선택하는 경우로 바뀌었습니다. 이를 통해 $_nH_r=_{n+k-1}C_r$ 임을 알 수 있으며, 경우의 수는 아래와 같습니다. $$_4H_3=_6C_3= frac{6!}{3!3!}= frac{6*5*4}{3*2*1}=20$$ . | .",
            "url": "https://woohyeok-moon.github.io/Blog/statistics/2021/08/17/%EC%88%9C%EC%97%B4%EA%B3%BC_%EC%A1%B0%ED%95%A9(3).html",
            "relUrl": "/statistics/2021/08/17/%EC%88%9C%EC%97%B4%EA%B3%BC_%EC%A1%B0%ED%95%A9(3).html",
            "date": " • Aug 17, 2021"
        }
        
    
  
    
        ,"post7": {
            "title": "5. 순열과 조합(2)",
            "content": "&#50896;&#49692;&#50676; . - 서로 다른 n개에서 r개를 원형으로 배열하는 순열을 원순열이라고 합니다. 계산식은 $ frac{n!}{r(n-r)!}$ 입니다. . 숫자 1, 2, 3을 이용한 순열의 경우는 6가지가 존재합니다. . (1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1) . 이는 서로 다른 3개에서 3개를 배열하는 순열이기 때문에 아래와 같이 계산됩니다. . $$_3P_3=3!=3*2*1=6$$ . | 하지만 이 순열을 원형으로 배치한다면 결과가 다릅니다. . 위 그림과 같이 숫자를 원형으로 배열하게 되면, 회전하여 일치하는 경우는 모두 같은 경우이기 때문에 . 첫 번째, 네 번째, 다섯 번째 경우는 같은 경우입니다. . 두 번째, 세 번째, 여섯 번째 경우는 같은 경우입니다. . 때문에 경우의 수는 2로 줄어들게 됩니다. 이렇게 중복되는 경우는 빼주는 것이 아니라 나누어줘야 합니다. . 원순열에서는 회전하여 일치하는(중복되는) 경우의 수가 배열하는 원소의 개수(r)와 같기 때문에, r만큼 나누어줘야 합니다. 이를 식으로 나타내보겠습니다. . $$ frac{_nP_r}{r}= frac{n!}{r(n-r)!}$$ . | . . &#45796;&#44033;&#54805; &#49692;&#50676; . 저희는 원순열에서 회전하여 일치하는 경우를 같은 경우로 취급하였습니다. 그렇다면 원이 아닌 다각형에 배열한 순열의 경우는 어떻게 될까요? . - 이러한 순열을 다각형 순열이라고 부릅니다. . 마찬가지로 다각형 순열 또한 회전하여 일치하는 경우를 같은 경우로 취급합니다. . 첫 번째 그림(정사각형)의 경우, 회전시켰을 때 같은 모양이 되는 경우가 (처음 모양의 경우를 포함하여) 4개 존재합니다. 따라서 이를 식으로 나타내면 $ frac{n!}{4(n-r)!}$ 입니다. . 두 번째 그림(정삼각형)의 경우, 회전시켰을 때 같은 모양이 되는 경우가 3개 존재합니다. 따라서 이를 식으로 나타내면 $ frac{n!}{3(n-r)!}$ 입니다. . 세 번째 그림(직사각형)의 경우, 회전시켰을 때 같은 모양이 되는 경우가 2개 존재합니다. 따라서 이를 식으로 나타내면 $ frac{n!}{2(n-r)!}$ 입니다. . | . . &#46041;&#51088;&#49692;&#50676; . - 원순열, 다각형 순열 등과 같이 중복되는 경우가 존재하는 순열을 동자순열이라고 하고, 계산은 $_nP_r$에서 중복되는 경우의 수를 나눠줍니다. . 동자순열은 원순열과 다각형 순열 외에도 존재합니다. . 이와 같은 경우, 같은 색의 공끼리는 위치를 아무리 바꾸어도 동일한 경우가 됩니다. 따라서 빨간 색 공끼리 위치를 바꿀 경우의 수 $3!$만큼, 노란 색의 경우 $2!$만큼, 파란 색의 경우 $2!$만큼의 중복이 발생합니다. 중복을 고려하여 경우의 수를 계산해보겠습니다. $$ frac{_7P_7}{3!2!2!}= frac{7!}{24}=210$$ . | .",
            "url": "https://woohyeok-moon.github.io/Blog/statistics/2021/08/15/%EC%88%9C%EC%97%B4%EA%B3%BC_%EC%A1%B0%ED%95%A9(2).html",
            "relUrl": "/statistics/2021/08/15/%EC%88%9C%EC%97%B4%EA%B3%BC_%EC%A1%B0%ED%95%A9(2).html",
            "date": " • Aug 15, 2021"
        }
        
    
  
    
        ,"post8": {
            "title": "4. 순열과 조합(1)",
            "content": "&#49692;&#50676;(permutation) . - 서로 다른 n개에서 r개를 순서대로 나열하는 것을 순열이라고 합니다. 기호로는 $_nP_r$ 로 나타내고, 계산식은 n(n-1)(n-2)$ cdots$(n-r+1) 입니다. . 1부터 4까지 적힌 숫자 카드 4장 중 3장을 뽑아 숫자를 만들 때, 가능한 경우의 수를 구해봅시다. . 백의 자리에는 1, 2, 3, 4 총 4장의 카드 중 한 장을 선택할 수 있습니다. . 십의 자리에는 백의 자리에 들어간 한 장을 제외하고 남은 3장의 카드 중 한 장을 선택할 수 있습니다. . 일의 자리에는 남은 2장의 카드 중 한 장을 선택할 수 있습니다. . 위의 세 사건은 동시에 일어날 수 있기 때문에 곱의 법칙을 사용합니다. 따라서 가능한 경우의 수는 아래와 같습니다. $$4 * 3 * 2 = 24$$ . 기호로 표현하면, 서로 다른 4개에서 3개를 순서대로 나열하는 것이기 때문에 같이 표현됩니다. $$_4P_3 = 4(4-1)(4-2) = 4 * 3 * 2 = 24$$ . | . . &#44228;&#49849;(factorial) . - 자연수 n에 대하여 1부터 n까지 모든 자연수의 곱을 계승 또는 팩토리얼이라고 하고 기호로는 n$!$을 사용합니다. . 순열의 계산식을 보면 n(n-1)(n-2)$ cdots$ 와 같이 숫자가 내림차순으로 나열되어 곱해지는 구조를 가집니다. 이러한 식을 팩토리얼을 사용하여 간편하게 표현할 수 있습니다. $$_nP_r = frac{n!}{(n-r)!}$$ . 이 식을 사용하여 $_4P_3$을 표현해보겠습니다. $$_4P_3 = frac{4!}{(4-3)!} = frac{4 * 3 * 2 * 1}{1} = 24$$ . | . . &#51473;&#48373;&#49692;&#50676;(permutation with repetition) . - 서로 다른 n개에서 중복을 허용하여 r개를 순서대로 나열하는 것을 중복순열이라고 합니다. 기호로는 $_n Pi_r$ 로 나타내고, 계산식은$n^r$ 입니다. . 위의 시행에서 카드를 뽑고 난 뒤 카드를 돌려놓지 않고 남은 카드로 다음 자리의 숫자를 결정했습니다. 이처럼 이전의 추출로 인해 다음 추출에서 처음과는 다른 상태에서 경우의 수를 얻는 것을 비복원추출이라고 합니다. . | 반대로 숫자만 결정하고 카드를 빼가지 않는 경우에는 다음 자리 숫자를 결정할 때에도 선택지의 개수가 동일합니다. 이처럼 항상 처음과 같은 상태에서 경우의 수를 추출하는 것을 복원추출이라고 하고, 중복을 허용한다고 말합니다. 이 때 가능한 경우의 수를 구해봅시다. . 백의 자리에는 1, 2, 3, 4 총 4장의 카드 중 한 장을 선택할 수 있습니다. . 십의 자리 또한 1, 2, 3, 4 총 4장의 카드 중 한 장을 선택할 수 있습니다. . 일의 자리 또한 1, 2, 3, 4 총 4장의 카드 중 한 장을 선택할 수 있습니다. . 마찬가지로 곱의 법칙을 사용합니다. 따라서 가능한 경우의 수는 아래와 같습니다. . $$4 * 4 * 4 = 64$$ . 기호와 수식으로 표현할 때는 순열(P) 대신 중복순열($ Pi$)을 사용합니다. $$_4 Pi_3 = 4^3 = 64$$ . | .",
            "url": "https://woohyeok-moon.github.io/Blog/statistics/2021/08/14/%EC%88%9C%EC%97%B4%EA%B3%BC_%EC%A1%B0%ED%95%A9(1).html",
            "relUrl": "/statistics/2021/08/14/%EC%88%9C%EC%97%B4%EA%B3%BC_%EC%A1%B0%ED%95%A9(1).html",
            "date": " • Aug 14, 2021"
        }
        
    
  
    
        ,"post9": {
            "title": "3. 합의 법칙, 곱의 법칙",
            "content": "- 경우의 수를 구하는 방법에는 크게 두 가지가 있습니다. 바로 합의 법칙과 곱의 법칙 입니다. . &#54633;&#51032; &#48277;&#52825; . - 동시에 일어나지 않는 사건들의 경우의 수를 구할 때는 합의 법칙을 사용합니다. . 1에서 9까지의 숫자가 적힌 카드 9장 중 2장을 선택하는 시행을 할 때, 두 숫자의 합이 5 이하가 되는 사건 A의 경우의 수를 구해봅시다. . 합이 3인 경우의 수 : (1, 2) -&gt; 1개 . 합이 4인 경우의 수 : (1, 3) -&gt; 1개 . 합이 5인 경우의 수 : (1, 4), (2, 3) -&gt; 2개 . 합이 3인 경우와 합이 4인 경우는 동시에 일어날 수 없죠? 세 경우 모두 서로 동시에 일어날 수 없기 때문에 각각의 경우의 수를 합해줍니다. 따라서 사건 A의 경우의 수는 아래와 같습니다. $$1 + 1 + 2 = 4$$ . | 자연수 x, y로 이루어진 순서쌍에서 $x+y leq 4$ 인 사건 B의 경우의 수를 구해봅시다. . 합이 2인 경우의 수 : (1, 1) . 합이 3인 경우의 수 : (1, 2), (2, 1) . 합이 4인 경우의 수 : (2, 2) . 마찬가지로 사건 B의 경우의 수는 아래와 같습니다. $$1 + 2 + 1 = 4$$ . | 사건 A는 숫자의 중복 사용이 혀용되고, 사건 B는 숫자의 중복 사용이 허용되지 않는다는 차이가 있습니다. 그러나 그것과 별개로 나뉜 사건들이 동시에 일어날 수 없기 떄문에 두 사건 모두 합의 법칙을 사용합니다. . | . . &#44273;&#51032; &#48277;&#52825; . - 동시에 일어나는 두 사건의 경우의 수를 구할 때는 곱의 법칙을 사용합니다. . 주사위와 동전을 동시에 던지는 사건 C의 경우의 수를 구해봅시다. . 주사위를 통해 나올 수 있는 경우의 수 : 6 동전을 통해 나올 수 있는 경우의 수 : 2 . 합의 법칙 때와는 달리 주사위와 동전은 동시에 일어날 수 있는 사건입니다. 따라서 사건 C의 경우의 수는 $6 * 2 = 12$ 로 12개가 됩니다. . | 주사위 1개를 2번 던지는 사건 D의 경우의 수를 구해봅시다. . 주사위를 통해 나올 수 있는 경우의 수 : 6 주사위를 통해 나올 수 있는 경우의 수 : 6 . 마찬가지로 사건 D의 경우의 수는 $6 * 6 = 36$ 으로 36개가 됩니다. . | . . &#51032;&#47928;&#51216; . - 여기서 한 가지 의문이 발생합니다. . 사건 D의 경우 1개의 주사위를 두 번 던진다고 하였습니다. 여러분은 1개의 주사위를 동시에 두 번 던질 수 있나요? . 제가 해석한 &#39;동시&#39;의 개념은, 한 번의 시행에 각각의 사건이 함께 발생할 수 있는가? 입니다. . 사건 A로 돌아가봅시다. 합이 3인 사건 (1, 2)와 합이 4인 사건 (1, 3) 이 한 번의 시행에 함께 발생할 수 있나요? 아닙니다. 합이 3인 사건이 발생하는 순간 시행이 종료되기 때문에, 같은 시행에서 합이 4인 사건은 절대 일어날 수 없습니다. . 이번엔 사건 D로 가봅시다. 첫 번째 주사위의 눈이 나오는 사건과 두 번째 주사위의 눈이 나오는 사건이 한 번의 시행에 함께 발생할 수 있나요? 그렇습니다. 시행 자체가 주사위를 2번 던지는 것이기 때문에, 첫 번째 주사위를 던진다고 해도 시행이 종료되지 않습니다. 이후 두 번째 주사위를 던져야만 비로소 한 번의 시행이 끝나겠죠. . | .",
            "url": "https://woohyeok-moon.github.io/Blog/statistics/2021/08/13/%ED%95%A9%EC%9D%98_%EB%B2%95%EC%B9%99_%EA%B3%B1%EC%9D%98_%EB%B2%95%EC%B9%99.html",
            "relUrl": "/statistics/2021/08/13/%ED%95%A9%EC%9D%98_%EB%B2%95%EC%B9%99_%EA%B3%B1%EC%9D%98_%EB%B2%95%EC%B9%99.html",
            "date": " • Aug 13, 2021"
        }
        
    
  
    
        ,"post10": {
            "title": "2. 확률의 개념(2)",
            "content": "&#49324;&#44148;&#51032; &#51333;&#47448; . 표본공간의 어떤 부분집합이냐에 따라 사건의 종류가 나뉩니다. . 임의의 표본공간 S와 사건 A, B가 존재한다고 가정하겠습니다. . 합사건 $A cup B$ : A 또는 B 중 적어도 하나에는 일어나는 사건 | 곱사건 $A cap B$ : A 그리고 B에 모두 일어나는 사건 | 여사건 $A^ mathsf{c}$ : A의 원소들을 제외한 표본공간 S의 모든 원소들의 집합인 사건 | 배반사건 $A cap B = varnothing$ : 임의의 사건 A와 B에 공통원소가 하나도 존재하지 않을 때 배반사건이라고 합니다. | 공사건 $ varnothing$ : 표본공간의 원소를 하나도 포함하지 않는 사건 (원소의 개수가 0이다.) | 전사건 : 표본공간 S의 원소를 모두 포함하는 사건 | . . &#54869;&#47456;&#51032; &#51333;&#47448; . - 확률은 크게 네 가지 종류가 존재합니다. 수학적 확률, 기하학적 확률, 통계적 확률, 주관적 확률입니다. . . &#49688;&#54617;&#51201; &#54869;&#47456; . - 근원사건이 일어날 가능성이 모두 같을 때, 확률을 구하고 싶은 사건 A의 원소의 개수를 표본공간 S의 원소의 개수로 나눈 값을 수학적 확률이라고 합니다. . 동전을 던지는 시행에서, 앞이 나오는 사건을 A라고 가정하겠습니다. 이 때 표본공간 S와 사건 A는 아래와 같이 정의할 수 있습니다. $$S = {앞앞, 앞뒤, 뒤앞, 뒤뒤 }$$ $$A = {앞앞, 앞뒤, 뒤앞 }$$ . | 그렇다면 사건 A가 일어날 수학적 확률을 구해볼까요? $$P(A) = frac{n(A)}{n(S)} = frac{3}{4}$$ $$(n(A)=사건 A의 원소의 개수)$$ . | 한 가지 더 살펴보겠습니다. 저희는 사건이 표본공간의 부분집합임을 배웠습니다. 사건이 될 수 있는 집합들을 나열해보겠습니다. . $$ varnothing, {앞앞 }, cdots , {$앞뒤, 뒤앞, 뒤뒤$ }, S$$ . 보아하니, $P( varnothing)=0, P(S)=1$ 이 되고, 그 사이에 존재하는 사건의 확률들은 공사건과 전사건의 확률의 사이값임을 알 수 있군요. 여기서 알 수 있는 사실이 한 가지 있습니다. . 확률은 0 ~ 1 사이의 값을 가지게 된다는 것이죠! . | . . &#44592;&#54616;&#54617;&#51201; &#54869;&#47456; . - 표본공간 S와 사건 A를 임의의 면적이라고 생각하였을 때, A가 차지하는 면적을 S가 차지하는 면적으로 나눈 값을 기하학적 확률이라고 합니다. . 앞서 수학적 확률에서는 원소의 개수를 세어 확률을 구했습니다. . 책상 위에 색종이가 한 장 존재합니다. 그 색종이는 &#39;면적&#39;을 가지고 있겠죠. 여러분은 그 색종이 안에 있는 점들을 셀 수 있나요? 이처럼 원소를 셀 수 없는 기하학적 상황에서는 선의 길이, 면의 넓이, 도형의 부피 등으로 확률을 나타냅니다. . | . . &#53685;&#44228;&#51201; &#54869;&#47456; . - 실제로 무수히 많은 시행을 관측하여 얻어낸 횟수를 통해 정의하는 확률을 통계적 확률 이라고 합니다. . 주사위를 던졌을 때 1이 나올 확률을 수학적 확률에서는 $ frac{1}{6}$으로 바로 결론을 도출합니다. 하지만 실제로 이 주사위를 던졌을 때 $ frac{1}{6}$의 확률로 1이 나올 것인지는 누구도 보장할 수 없습니다. 그렇기 때문에 이 시행을 직접 해보는 것입니다. | . 이 떄 그냥 몇 번 던져보고 나오는 값만으로 확률을 알아볼 수는 없습니다. 10번 던졌을 때보다, 100번 던졌을 때, 1,000번, 10,000번, ... 이렇게 시행의 횟수가 커질수록 1이 나올 확률은 $ frac{1}{6}$에 수렴하게 됩니다. 이러한 것을 큰 수의 법칙이라고 합니다. 무수히 많은 시행을 관측하고, 그렇게 나온 결과를 반영했을 때 비로소 통계적 확률을 구한다고 말할 수 있습니다. | . . &#51452;&#44288;&#51201; &#54869;&#47456; . - 지금까지의 전통적 확률과는 달리, 주관적인 믿음의 정도를 0 ~ 1 사이의 숫자로 나타낸 것을 주관적 확률이라고 합니다. . 이를테면 주사위를 던졌을 때 1, 2, ..., 6이 나올 확률이 각각 $ frac{1}{6}$이라는 주장은, &#39;각 숫자가 나올 가능성은 동일하다&#39;라는 믿음을 반영한 것입니다. 이 개념의 도입으로 많은 것들이 가능해졌습니다. 이를테면, 지금까지 시행의 조건으로 &#39;동일한 조건에서 반복 가능할 것&#39;을 강요받아왔습니다. 그렇기에 일회성 사건이나 비용이 많이 필요한 연구가설 등은 확률실험의 대상이 될 수 없었습니다. 반면 주관적 확률은 시행의 조건에서 자유롭기 때문에 이러한 것들의 확률을 논할 수 있습니다. 이는 추후 베이즈 정리를 공부할 때 필요한 개념이며, 더 자세한 것은 그 때 다루도록 하겠습니다. | .",
            "url": "https://woohyeok-moon.github.io/Blog/statistics/2021/08/12/%ED%99%95%EB%A5%A0%EC%9D%98_%EA%B0%9C%EB%85%90(2).html",
            "relUrl": "/statistics/2021/08/12/%ED%99%95%EB%A5%A0%EC%9D%98_%EA%B0%9C%EB%85%90(2).html",
            "date": " • Aug 12, 2021"
        }
        
    
  
    
        ,"post11": {
            "title": "1. 확률의 개념(1)",
            "content": ". &#49436;&#47200; . 머신러닝, 딥러닝 공부를 하다보니 통계학에 대해 한 번 정리하고 넘어가야겠다는 생각을 하게 되었습니다. . 여러분은 고등학교 시절부터 지금까지, 확률과 통계라는 단어를 종종 접해보셨을 겁니다. 확률과 통계는 엄연히 다른 개념입니다. 통계를 알지 못해도 확률을 배울 수는 있지만, 확률을 알지 못하면 통계를 배울 수 없습니다. . . &#49324;&#51204; &#51648;&#49885; . - 확률을 공부하기 전에 알아두어야 할 사전 지식이 있습니다. 바로 시행, 표본공간, 사건 입니다. . . &#49884;&#54665;(trial) . - 시행이란 동일한 조건에서 여러 번 반복할 수 있고, 그 결과가 우연에 의해 결정되는 &#39;관찰 또는 실험&#39;을 말합니다. . 확률을 구하는 실험으로 주사위 실험과 동전 던지기 실험이 빈번하게 등장하곤 합니다. 이는 두 실험이 저 조건을 모두 만족하는 시행에 해당되기 때문입니다. . | A가 주사위 또는 동전을 6번 던지는 실험을 가정해보겠습니다. 이 때, A의 첫 번째 시행과 두 번째 시행, n 번째 시행의 조건은 다르지 않습니다. 한 번 던졌다고 해서 주사위나 동전이 사라지거나 손상되지는 않기 때문에 반복 가능합니다. 또한 저희가 이 실험의 결과를 의도적으로 바꿀 수 없기 때문에 우연에 의해 결과가 결정된다고 할 수 있습니다. . | . - 시행의 조건을 정하는 데는 이유가 있습니다. . 저희는 통계적 확률을 구하려고 합니다. 허나 동일한 조건에서 여러 번 반복할 수 없다면, 시행의 횟수가 적어 유의미한 확률을 구할 수 없을 것입니다. 또한 결과가 우연에 의해 일어나는 것이 아니라 어떤 원인에 의해 필연적으로 일어난다면, 확률을 구하는 것 보다는 그 원인과 결과의 관계성을 추론하는 것이 더 바람직한 행위일 것입니다. | . . &#54364;&#48376;&#44277;&#44036;(sample space) . - 어떠한 시행을 통해 얻을 수 있는 모든 결과들의 집합을 바로 표본공간이라고 합니다. 기호는 S로 표기하겠습니다. . 동전을 두 번 던져 앞면 또는 뒷면을 확인하는 시행을 가정하겠습니다. 표본공간은 아래와 같이 표현할 수 있습니다. . $$S= {앞앞, 앞뒤, 뒤앞, 뒤뒤 }$$ . 이 시행에서 저 표본공간 밖의 결과는 얻어낼 수 없습니다. . | . . &#49324;&#44148;(event) . - 사건은 표본공간의 부분집합을 의미합니다. . 예를 들어, 위의 실험에서 &#39;앞면이 1번 이상 나오는 사건 A&#39;와 &#39;뒷면이 나오지 않는 사건 B&#39;는 아래와 같습니다. $$A= {앞앞, 앞뒤, 뒤앞 }$$ $$B= {앞앞 }$$ . | 조금 더 생각해보면, 사건은 절대 표본공간을 벗어나지 못함을 알 수 있습니다. 표본공간 부분 마지막 문장과 연결하여 생각해보는 것을 추천합니다. . | . . &#44540;&#50896;&#49324;&#44148;(fundamental event) . - 추가적으로, 표본공간에서 원소의 개수가 하나인 사건을 근원사건이라고 합니다. . 이 실험에서 근원사건은 $ {$앞앞$ }$, $ {$앞뒤$ }$, $ {$뒤앞$ }$, $ {$뒤뒤$ }$가 되겠네요. 위의 사건 B 또한 근원사건이라고 볼 수 있겠죠. | .",
            "url": "https://woohyeok-moon.github.io/Blog/statistics/2021/08/11/%ED%99%95%EB%A5%A0%EC%9D%98_%EA%B0%9C%EB%85%90(1).html",
            "relUrl": "/statistics/2021/08/11/%ED%99%95%EB%A5%A0%EC%9D%98_%EA%B0%9C%EB%85%90(1).html",
            "date": " • Aug 11, 2021"
        }
        
    
  
    
        ,"post12": {
            "title": "0. 수리통계학 정리",
            "content": "1.1 . 두 개의 사건 A와 B에 대하여 다음과 같은 성질들이 성립한다. $$P(A^c)=1-P(A)$$ $$P( varnothing)=0$$ $$A subset B이면 P(A) leq P(B)이다.$$ $$P(A cup B) = P(A) + P(B) - P(A cup B)$$ . . 1.2 (&#51204;&#54869;&#47456;&#44277;&#49885;) . 사건 $B_1, B_2, cdots , B_k$는 상호배반이며 $(B_i cap B_j = varnothing, i neq j), cup_{i=1}^{k}B_i=S$라고 하자. 이 때 임의의 사건 A에 대하여, . $$P(A)= sum_{i=1}^{k}P(B_i)P(A|B_i)$$ . 가 성립한다. . . 1.3 (&#48288;&#51060;&#51592; &#51221;&#47532;) . 사건 $B_1, B_2, cdots , B_k$는 상호배반이며 $(B_i cap B_j = varnothing, i neq j), cup_{i=1}^{k}B_i=S$라고 하자. 이 때 사건 A가 일어났다는 조건하에서 사건 B_j가 일어날 확률은 . $$P(B_j|A)= frac{P(B_j)P(A|B)}{ sum_{i=1}^{k}P(B_i)P(A|B_i)}$$ . 로 주어진다. . . 참고문헌 . 송성주, 전명식, &quot;수리통계학&quot;, 자유아카데미 . | .",
            "url": "https://woohyeok-moon.github.io/Blog/statistics/2021/08/10/%EC%88%98%EB%A6%AC%ED%86%B5%EA%B3%84%ED%95%99-%EC%A0%95%EB%A6%AC.html",
            "relUrl": "/statistics/2021/08/10/%EC%88%98%EB%A6%AC%ED%86%B5%EA%B3%84%ED%95%99-%EC%A0%95%EB%A6%AC.html",
            "date": " • Aug 10, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "전북대학교 통계학과 2학년 재학 중. . | 머신러닝, 딥러닝 공부 중. . | .",
          "url": "https://woohyeok-moon.github.io/Blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://woohyeok-moon.github.io/Blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}